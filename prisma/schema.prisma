generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                       String    @id
  scope                    String?
  password                 String?
  access_token             String?
  access_token_expires_at  DateTime?
  account_id               String
  created_at               DateTime  @default(now())
  id_token                 String?
  provider_id              String
  refresh_token            String?
  refresh_token_expires_at DateTime?
  updated_at               DateTime
  user_id                  String
  user                     user      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model session {
  id         String   @id
  token      String   @unique
  created_at DateTime @default(now())
  expires_at DateTime
  ip_address String?
  updated_at DateTime
  user_agent String?
  user_id    String
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model verification {
  id         String    @id
  identifier String
  value      String
  created_at DateTime? @default(now())
  expires_at DateTime
  updated_at DateTime?
}

model attendance {
  id                 String          @id
  student_id         String
  attendance_item_id String
  is_present         Boolean
  created_at         DateTime        @default(now())
  updated_at         DateTime
  attendance_item    attendance_item @relation(fields: [attendance_item_id], references: [id])
  student            student         @relation(fields: [student_id], references: [id])
}

model attendance_item {
  id             String       @id
  name           String
  description    String?
  is_hidden      Boolean      @default(false)
  open_date      DateTime?    @default(now())
  due_date       DateTime?
  close_date     DateTime?
  created_at     DateTime     @default(now())
  updated_at     DateTime
  course_item_id String
  attendance     attendance[]
  course_item    course_item  @relation(fields: [course_item_id], references: [id])
}

model course {
  id             String           @id
  name           String
  code           String           @unique
  description    String?
  is_hidden      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  category       COURSE_CATEGORY
  course_section course_section[]
  students       student[]        @relation("CourseToStudent")
  teachers       teacher[]        @relation("CourseToTeacher")
}

model course_item {
  id                String            @id
  name              String
  description       String?
  is_hidden         Boolean           @default(false)
  created_at        DateTime          @default(now())
  updated_at        DateTime
  course_section_id String
  type              COURSEITEM_TYPE
  attendance_item   attendance_item[]
  course_section    course_section    @relation(fields: [course_section_id], references: [id], onDelete: Cascade)
  material          material?
  quiz              quiz?
  task              task?
}

model course_section {
  id          String        @id
  name        String
  description String?
  is_hidden   Boolean       @default(false)
  created_at  DateTime      @default(now())
  updated_at  DateTime
  course_id   String
  course_item course_item[]
  course      course        @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model material {
  id             String      @id
  file_url       String
  file_type      FILE_TYPE
  transcripted   String
  created_at     DateTime    @default(now())
  updated_at     DateTime
  course_item_id String      @unique
  course_item    course_item @relation(fields: [course_item_id], references: [id], onDelete: Cascade)
}

model quiz {
  id              String            @id
  title           String
  description     String?
  open_date       DateTime          @default(now())
  duration        Int
  due_date        DateTime
  created_at      DateTime          @default(now())
  updated_at      DateTime
  course_item_id  String            @unique
  course_item     course_item       @relation(fields: [course_item_id], references: [id], onDelete: Cascade)
  quiz_question   quiz_question[]
  quiz_submission quiz_submission[]
}

model quiz_question {
  id                      String                    @id
  question                String
  answer                  String
  is_hidden               Boolean                   @default(false)
  options                 String[]
  explanation             String?
  correct_answer          String
  created_at              DateTime                  @default(now())
  updated_at              DateTime
  quiz_id                 String
  quiz                    quiz                      @relation(fields: [quiz_id], references: [id])
  quiz_question_choice    quiz_question_choice[]
  quiz_submission_answers quiz_submission_answers[]
}

model quiz_question_choice {
  id               String        @id
  text             String
  quiz_question_id String
  quiz_question    quiz_question @relation(fields: [quiz_question_id], references: [id])
}

model quiz_submission {
  id                      String                    @id
  student_id              String
  quiz_id                 String
  answers                 String[]
  score                   Int
  is_graded               Boolean                   @default(false)
  is_hidden               Boolean                   @default(false)
  created_at              DateTime                  @default(now())
  updated_at              DateTime
  quiz                    quiz                      @relation(fields: [quiz_id], references: [id])
  student                 student                   @relation(fields: [student_id], references: [id])
  quiz_submission_answers quiz_submission_answers[]
}

model quiz_submission_answers {
  id                 String          @id
  quiz_submission_id String
  quiz_question_id   String
  answer             String
  created_at         DateTime        @default(now())
  updated_at         DateTime
  quiz_question      quiz_question   @relation(fields: [quiz_question_id], references: [id])
  quiz_submission    quiz_submission @relation(fields: [quiz_submission_id], references: [id])
}

model student {
  id              String            @id
  user_id         String            @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime
  attendance      attendance[]
  quiz_submission quiz_submission[]
  user            user              @relation(fields: [user_id], references: [id])
  task_submission task_submission[]
  Course          course[]          @relation("CourseToStudent")
}

model task {
  id              String            @id
  open_date       DateTime?         @default(now())
  due_date        DateTime?
  close_date      DateTime?
  created_at      DateTime          @default(now())
  updated_at      DateTime
  courseItemId    String            @unique
  course_item     course_item       @relation(fields: [courseItemId], references: [id], onDelete: Cascade)
  task_attachment task_attachment[]
  task_submission task_submission[]
}

model task_attachment {
  id          String    @id
  name        String
  description String?
  file_url    String
  file_type   FILE_TYPE
  is_hidden   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime
  task_id     String
  task        task      @relation(fields: [task_id], references: [id])
}

model task_submission {
  id                         String                       @id
  student_id                 String
  task_id                    String
  file_url                   String
  is_graded                  Boolean                      @default(false)
  is_hidden                  Boolean                      @default(false)
  created_at                 DateTime                     @default(now())
  updated_at                 DateTime
  grade                      Int?
  feedback                   String?
  grader_id                  String?
  teacher                    teacher?                     @relation(fields: [grader_id], references: [id])
  student                    student                      @relation(fields: [student_id], references: [id])
  task                       task                         @relation(fields: [task_id], references: [id])
  task_submission_attachment task_submission_attachment[]
}

model task_submission_attachment {
  id                 String          @id
  name               String
  description        String?
  file_url           String
  file_type          FILE_TYPE
  is_hidden          Boolean         @default(false)
  created_at         DateTime        @default(now())
  updated_at         DateTime
  task_submission_id String
  task_submission    task_submission @relation(fields: [task_submission_id], references: [id])
}

model teacher {
  id              String            @id
  user_id         String            @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime
  task_submission task_submission[]
  user            user              @relation(fields: [user_id], references: [id])
  Course          course[]          @relation("CourseToTeacher")
}

model user {
  id              String           @id
  name            String?
  email           String?          @unique
  password        String?
  created_at      DateTime         @default(now())
  updated_at      DateTime
  email_verified  Boolean          @default(false)
  image           String?
  account         account[]
  session         session[]
  student         student?
  teacher         teacher?
  user_log        user_log[]
  user_preference user_preference?
}

model user_log {
  id         String   @id
  user_id    String
  action     String
  timestamp  DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime
  user       user     @relation(fields: [user_id], references: [id])
}

model user_preference {
  id               String   @id
  user_id          String   @unique
  is_disabled_mode Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime
  user             user     @relation(fields: [user_id], references: [id])
}

enum ADMIN_ROLE {
  SUPER_ADMIN
  ADMIN
}

enum FILE_TYPE {
  PDF
  VIDEO
  AUDIO
  PPT
}

enum COURSE_CATEGORY {
  SOCIOLOGY
  GEOGRAPHY
  ENGLISH
  MATHEMATICS
  ECONOMICS
  HISTORY
  SCIENCE
  ART
  MUSIC
  PHYSICAL_EDUCATION
  STATISTICS
}

enum COURSEITEM_TYPE {
  MATERIAL
  QUIZ
  TASK
}
